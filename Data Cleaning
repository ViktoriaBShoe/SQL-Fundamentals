#DATA CLEANING

# Duplicated a `customer_sweepstakes1_staging` table into a new table `customer_sweepstakes1`

SELECT * 
FROM bakery.customer_sweepstakes1
;

# 1. Identifying Duplicates (2 ways)

# HAVING

SELECT customer_id, COUNT(customer_id)
FROM bakery.customer_sweepstakes1
GROUP BY customer_id
HAVING COUNT(customer_id) > 1
;

# Window Function

SELECT *
FROM (SELECT customer_id,
ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY customer_id) AS row_num
FROM bakery.customer_sweepstakes1) AS table_row
WHERE row_num > 1
;

# 2. Removing Duplicates

DELETE FROM bakery.customer_sweepstakes1
WHERE sweepstake_id IN (

	SELECT sweepstake_id
	FROM (
		SELECT sweepstake_id,
		ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY sweepstake_id) AS row_num
		FROM bakery.customer_sweepstakes1) AS table_row
	WHERE row_num > 1
    );
    

# 3. Standardizing Data

# Phone Number

SELECT phone
FROM bakery.customer_sweepstakes1
;
  
SELECT phone, REGEXP_REPLACE(phone, '[()-/+]', '')
FROM bakery.customer_sweepstakes1
;

UPDATE bakery.customer_sweepstakes1
SET phone = REGEXP_REPLACE(phone, '[()-/+]', '')
;

SELECT phone, CONCAT(SUBSTRING(phone, 1,3),'-', SUBSTRING(phone, 4,3),'-', SUBSTRING(phone, 7,4))
FROM bakery.customer_sweepstakes1
WHERE phone <> ''
;

UPDATE bakery.customer_sweepstakes1
SET phone = CONCAT(SUBSTRING(phone, 1,3),'-', SUBSTRING(phone, 4,3),'-', SUBSTRING(phone, 7,4))
WHERE phone <> ''
;

# Birth Date

SELECT birth_date
FROM bakery.customer_sweepstakes1
;

SELECT birth_date, 
STR_TO_DATE(birth_date, '%m/%d/%Y'),
STR_TO_DATE(birth_date, '%Y/%d/%m')
FROM bakery.customer_sweepstakes1
;

SELECT birth_date, 
IF(STR_TO_DATE(birth_date, '%m/%d/%Y') IS NOT NULL, STR_TO_DATE(birth_date, '%m/%d/%Y'),STR_TO_DATE(birth_date, '%Y/%d/%m')),
STR_TO_DATE(birth_date, '%m/%d/%Y'),
STR_TO_DATE(birth_date, '%Y/%d/%M')
FROM bakery.customer_sweepstakes1
;


SELECT birth_date, CONCAT(
	SUBSTRING(birth_date,9,2),'/', SUBSTRING(birth_date,6,2),'/', SUBSTRING(birth_date,1,4)
    )
FROM bakery.customer_sweepstakes1
;

UPDATE bakery.customer_sweepstakes1
SET birth_date = CONCAT(
	SUBSTRING(birth_date,9,2),'/', SUBSTRING(birth_date,6,2),'/', SUBSTRING(birth_date,1,4)
    )
WHERE sweepstake_id IN (9,11)
;

UPDATE bakery.customer_sweepstakes1
SET birth_date = STR_TO_DATE(birth_date, '%m/%d/%Y')
;

# The `Are you over 18?` column

SELECT `Are you over 18?`
FROM bakery.customer_sweepstakes1
;

SELECT `Are you over 18?`, 
CASE 
	WHEN `Are you over 18?` = 'Yes' THEN 'Y'
    WHEN `Are you over 18?` = 'No' THEN 'N'
    ELSE `Are you over 18?`
END
FROM bakery.customer_sweepstakes1
;

UPDATE bakery.customer_sweepstakes1
SET `Are you over 18?` = CASE 
	WHEN `Are you over 18?` = 'Yes' THEN 'Y'
    WHEN `Are you over 18?` = 'No' THEN 'N'
    ELSE `Are you over 18?`
END
;

# Address

SELECT address
FROM bakery.customer_sweepstakes1
;

SELECT address, 
	SUBSTRING_INDEX(address, ',', 1) AS street,
    SUBSTRING_INDEX(SUBSTRING_INDEX(address, ',', 2), ',', -1) AS city,
    SUBSTRING_INDEX(address, ',', -1) AS state
FROM bakery.customer_sweepstakes1
;

ALTER TABLE bakery.customer_sweepstakes1
ADD COLUMN street VARCHAR(50) AFTER address,
ADD COLUMN city VARCHAR(50) AFTER street,
ADD COLUMN state VARCHAR(50) AFTER city
;

UPDATE bakery.customer_sweepstakes1
SET street = SUBSTRING_INDEX(address, ',', 1)
;

UPDATE bakery.customer_sweepstakes1
SET city = SUBSTRING_INDEX(SUBSTRING_INDEX(address, ',', 2), ',', -1)
;

UPDATE bakery.customer_sweepstakes1
SET state = SUBSTRING_INDEX(address, ',', -1)
;

UPDATE bakery.customer_sweepstakes1
SET city = TRIM(city)
;

UPDATE bakery.customer_sweepstakes1
SET state = TRIM(state)
;

UPDATE bakery.customer_sweepstakes1
SET state = UPPER(state)
;

# 4. Working with Null Values


# Income

# Updating blanks with nulls

UPDATE bakery.customer_sweepstakes1
SET phone = NULL 
WHERE phone = ''
;

UPDATE bakery.customer_sweepstakes1
SET income = NULL 
WHERE income = ''
;

# If those nulls in fact were meant to be zeros, I could use the COALESCE function

SELECT AVG(COALESCE(income,0))
FROM bakery.customer_sweepstakes1
;


# The 'Are you over 18?' column has wrong values based off customers' birthdates

SELECT birth_date, `Are you over 18?`
FROM bakery.customer_sweepstakes1
WHERE YEAR(birth_date) > (YEAR(NOW()) - 18)
;

UPDATE bakery.customer_sweepstakes1
SET `Are you over 18?` = 'N'
WHERE YEAR(birth_date) > (YEAR(NOW()) - 18)
;

UPDATE bakery.customer_sweepstakes1
SET `Are you over 18?` = 'Y'
WHERE YEAR(birth_date) < (YEAR(NOW()) - 18)
;


# 5. Deleting Unused Columns

# The address column is already broked down to street, city, state, so we can remove the original column
# The favorite_color column is unnecessary

ALTER TABLE bakery.customer_sweepstakes1
DROP COLUMN address
;

ALTER TABLE bakery.customer_sweepstakes1
DROP COLUMN favorite_color
;
